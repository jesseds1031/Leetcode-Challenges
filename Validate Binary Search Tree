/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        //use helper and start with max values
       return helper(root, LONG_MIN, LONG_MAX);
    }
    
    bool helper(TreeNode* root, const long min, const long max){
        // are we at the end? We have not hit a false case, so return true
        if (root == NULL) {
            return true;
        }
        // check if the curr node has a value that is less than the min or greater than max
        // or equal to either
        else if (root->val >= max) {
            return false;
        }
        else if (root->val <= min){
            return false;
        }
    
        // Recurse right and left, and update new min and max
        return helper(root->left, min, root->val) && helper(root->right, root->val, max);

    }
};
