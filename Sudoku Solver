class Solution {
    public void solveSudoku(char[][] board) {
        if (board == null || board.length == 0)
        {
            return;
        }
        solve(board);
        
    }

    public boolean solve(char[][] board)
    {
        for (int i = 0; i < board.length; i++)
        {
            for (int j = 0; j < board[i].length; j++)
            {
                if (board[i][j] == '.')
                {

                    for(char c = '1'; c <= '9'; c++)
                    {
                        if (isValid(board, i, j, (char)c))
                        {
                            board[i][j] = c;

                            if(solve(board))
                            {
                                return true;
                            }
                            else
                            {
                                board[i][j] = '.';
                            }
                        }

                        
                    }
                    return false;
                }
                
            }
        }
        return true;
    }

    public boolean isValid(char[][] board, int i, int j, char ch)
    {
        for (int counter = 0; counter < board.length; counter++)
        {
            if (board[counter][j] != '.' && board[counter][j] == ch)
            {
                return false;
            }
            if (board[i][counter] != '.' && board[i][counter] == ch)
            {
                return false;
            }
            if (board[3 * (i / 3) + counter / 3][3 * (j / 3) + counter % 3] != '.' &&
                board[3 * (i / 3) + counter / 3][3 * (j / 3) + counter % 3] == ch)
            {
                return false;
            }
        
        }
        return true;
    }
}
